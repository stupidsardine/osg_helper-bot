
import os
import re
import math
import logging
from datetime import datetime, timedelta

# === –õ–æ–≥–∏ ===
logging.basicConfig(level=logging.INFO)

# === Telegram ===
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—á—ë—Ç–∞ ===
SHELF_LIFE_DAYS = 360          # —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏, –¥–Ω–µ–π
TARGET_OSG_PERCENT = 82        # —Ü–µ–ª–µ–≤–æ–π –û–°–ì, %
SAFETY_BUFFER_DAYS = 2         # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø–∞—Å, –¥–Ω–µ–π

# === –ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ ===
# –°–±–æ—Ä–∫–∞ ‚Äî –ê—à–∞/–ß–µ–ª—è–±–∏–Ω—Å–∫ (UTC+5), –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –ú–æ—Å–∫–≤–∞ (UTC+3)
try:
    from zoneinfo import ZoneInfo
    TZ_PICK = ZoneInfo("Asia/Yekaterinburg")  # –ê—à–∞/–ß–µ–ª—è–±–∏–Ω—Å–∫
    TZ_DELIV = ZoneInfo("Europe/Moscow")      # –ú–æ—Å–∫–≤–∞
except Exception:
    # fallback –µ—Å–ª–∏ ZoneInfo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞ Windows –ø–æ—Å—Ç–∞–≤—å –ø–∞–∫–µ—Ç tzdata)
    from datetime import timezone, timedelta
    TZ_PICK  = timezone(timedelta(hours=5))
    TZ_DELIV = timezone(timedelta(hours=3))

HELP_TEXT = (
    "üëã –í–≤–µ–¥–∏ –¥–∞—Ç—É —Å–±–æ—Ä–∫–∏ (–ê—à–∞, UTC+5), —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–∞—Ç—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.\n"
    "–ü—Ä–∏–º–µ—Ä—ã: 2025-11-10, 10.11.2025, –∑–∞–≤—Ç—Ä–∞, –≤ –ø–Ω, —á–µ—Ä–µ–∑ 3 –¥–Ω—è.\n\n"
    "–ü—Ä–∞–≤–∏–ª–æ –Ω–µ–¥–µ–ª–∏: –ß—Ç‚Äì–í—Å ‚Üí –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–ú–æ—Å–∫–≤–∞, UTC+3). "
    "–ü–Ω‚Äì–°—Ä ‚Üí –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ —ç—Ç—É –∂–µ –¥–∞—Ç—É (–ú–æ—Å–∫–≤–∞).\n"
    f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –°–ì={SHELF_LIFE_DAYS} –¥–Ω, –û–°–ì‚â•{TARGET_OSG_PERCENT}%, –∑–∞–ø–∞—Å {SAFETY_BUFFER_DAYS} –¥–Ω."
)

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

def parse_human_date(s: str, now_dt: datetime) -> datetime | None:
    """
    –ü–∞—Ä—Å–∏—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã: —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞,
    '–≤ –ø–Ω/–≤—Ç/‚Ä¶', '—á–µ—Ä–µ–∑ N –¥–Ω–µ–π', —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞—Ç—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime —Å tz now_dt.tzinfo.
    """
    s = (s or "").strip().lower()
    if not s:
        return None

    if s in ("—Å–µ–≥–æ–¥–Ω—è", "today"):
        return now_dt
    if s in ("–∑–∞–≤—Ç—Ä–∞", "tomorrow"):
        return now_dt + timedelta(days=1)
    if s in ("–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞",):
        return now_dt + timedelta(days=2)

    m = re.match(r"—á–µ—Ä–µ–∑\s+(\d+)\s*(–¥–Ω|–¥–Ω—è|–¥–Ω–µ–π)?", s)
    if m:
        return now_dt + timedelta(days=int(m.group(1)))

    weekdays = {"–ø–Ω":0, "–≤—Ç":1, "—Å—Ä":2, "—á—Ç":3, "–ø—Ç":4, "—Å–±":5, "–≤—Å":6}
    m = re.match(r"–≤\s*(–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å)$", s)
    if m:
        target = weekdays[m.group(1)]
        delta = (target - now_dt.weekday()) % 7
        if delta == 0:
            delta = 7
        return now_dt + timedelta(days=delta)

    for fmt in ("%Y-%m-%d", "%d.%m.%Y", "%d/%m/%Y"):
        try:
            # –ø–æ–¥—Å—Ç–∞–≤–∏–º TZ –æ—Ç now_dt
            dt = datetime.strptime(s, fmt)
            return dt.replace(tzinfo=now_dt.tzinfo)
        except ValueError:
            pass

    return None

def parse_human_date_local(s: str, now_pick: datetime) -> datetime | None:
    return parse_human_date(s, now_pick)

def resolve_delivery_date_from_pick(input_date_pick: datetime) -> datetime:
    """
    input_date_pick ‚Äî –¥–∞—Ç–∞ —Å–±–æ—Ä–∫–∏ (–ê—à–∞, TZ_PICK).
    –ï—Å–ª–∏ —ç—Ç–æ –ß—Ç‚Äì–í—Å ‚Üí –¥–æ—Å—Ç–∞–≤–∫–∞ –±–ª–∏–∂–∞–π—à–∏–π –ü–Ω (–ú–æ—Å–∫–≤–∞).
    –ï—Å–ª–∏ –ü–Ω‚Äì–°—Ä ‚Üí –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ —ç—Ç—É –¥–∞—Ç—É (–ú–æ—Å–∫–≤–∞).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º datetime (–ú–æ—Å–∫–≤–∞) —Å –≤—Ä–µ–º–µ–Ω–µ–º 12:00.
    """
    wd = input_date_pick.weekday()  # Mon=0..Sun=6
    if wd >= 3:  # Thu..Sun
        delta = 7 - wd if wd != 6 else 1
        delivery_local = input_date_pick + timedelta(days=delta)
    else:
        delivery_local = input_date_pick

    d = delivery_local.date()
    delivery_msk = datetime(d.year, d.month, d.day, 12, 0, 0, tzinfo=TZ_DELIV)
    return delivery_msk

def min_prod_date(delivery: datetime,
                  shelf=SHELF_LIFE_DAYS,
                  target=TARGET_OSG_PERCENT,
                  safety=SAFETY_BUFFER_DAYS):
    """
    –û–°–ì >= target%  => –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ <= shelf * (1 - target%)
    –ë–µ—Ä–µ–º –ø–æ—Ç–æ–ª–æ–∫ –∏ —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ safety –¥–ª—è –∑–∞–ø–∞—Å–∞ (—Ç—Ä–µ–±—É–µ–º —Å–≤–µ–∂–µ–µ).
    """
    max_elapsed = shelf * (1 - target/100.0)     # 360*(1-0.82)=64.8
    allowed_age = max(0, math.ceil(max_elapsed) - safety)  # 65 -> 63
    return (delivery - timedelta(days=allowed_age)).date()

# ---------- Telegram handlers ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç —Ä–∞—Å—á—ë—Ç–∞ –¥–∞—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è –û–°–ì.\n" + HELP_TEXT)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = (update.message.text or "").strip()
        print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {text!r}")

        # –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–Ω—É –¥–∞—Ç—É –∑–∞ —Ä–∞–∑
        if any(sep in text for sep in [",", ";", "\n"]):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π –æ–¥–Ω—É –¥–∞—Ç—É –∑–∞ —Ä–∞–∑. –ü—Ä–∏–º–µ—Ä—ã: 10.11.2025, ¬´–≤ –ø–Ω¬ª, ¬´—á–µ—Ä–µ–∑ 3 –¥–Ω—è¬ª."
            )
            return

        now_pick = datetime.now(TZ_PICK)
        dt_pick = parse_human_date_local(text, now_pick)
        if not dt_pick:
            await update.message.reply_text(
                "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞ –¥–∞—Ç—É ü§î\n–ü—Ä–∏–º–µ—Ä—ã: 2025-11-10, 10.11.2025, ¬´–≤ –ø–Ω¬ª, ¬´—á–µ—Ä–µ–∑ 3 –¥–Ω—è¬ª."
            )
            return

        delivery = resolve_delivery_date_from_pick(dt_pick)
        min_prod = min_prod_date(delivery)

        reply = (
            f"üì¶ –°–±–æ—Ä–∫–∞ (–ê—à–∞, UTC+5): *{dt_pick.strftime('%d.%m.%Y (%a)')}*\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞ (–ú–æ—Å–∫–≤–∞, UTC+3): *{delivery.strftime('%d.%m.%Y (%a)')}*\n"
            f"üßæ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ‚Äî *–Ω–µ —Ä–∞–Ω—å—à–µ {min_prod.strftime('%d.%m.%Y')}* "
            f"(–û–°–ì ‚â• {TARGET_OSG_PERCENT}% + {SAFETY_BUFFER_DAYS} –¥–Ω)"
        )
        await update.message.reply_text(reply, parse_mode="Markdown")

    except Exception as e:
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_text", exc_info=e)
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –Ø –∑–∞–ø–∏—Å–∞–ª –æ—à–∏–±–∫—É –≤ –ª–æ–≥.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ", exc_info=context.error)

# ---------- main ----------

def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_error_handler(error_handler)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == "__main__":
    main()