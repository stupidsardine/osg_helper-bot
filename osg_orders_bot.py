# -*- coding: utf-8 -*-
"""
OSG Orders Bot ‚Äî v21+ (python-telegram-bot)
Google Sheets (gspread + —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç)

ENV/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤–∞—Ä–∏–∞–Ω—Ç—ã):
- –í .env/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    TELEGRAM_BOT_TOKEN=xxx:yyyy
    GOOGLE_SHEET_ID=1A2B3C... (ID —Ç–∞–±–ª–∏—Ü—ã –≤ URL)
    GOOGLE_APPLICATION_CREDENTIALS=./gsa.json  (–ø—É—Ç—å –∫ –∫–ª—é—á—É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)
- –õ–∏–±–æ –∑–∞–¥–∞–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–∏–∂–µ (fallback).
"""

import os
import logging
from typing import Dict, List, Optional
from datetime import datetime, timedelta

import gspread
from gspread.exceptions import WorksheetNotFound

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# -------------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï --------------------
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO,  # —Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π ‚Äî DEBUG
)
logger = logging.getLogger("osg-bot")
logger.setLevel(logging.DEBUG)

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------
TELEGRAM_BOT_TOKEN = "8462456972:AAHBUSVkSYEsJWmexYBoK-gLcTbsdj1LLXo"
GOOGLE_SHEET_ID = "1O1LQ0y9IC4k4sp6_q5Uq5E8hABVLkh_29txBaygULdA"
GOOGLE_CREDS_PATH = r"C:\Users\–ê–ª–µ–∫—Å–µ–π\Desktop\osg-helper-bot\gsa.json"
ORDERS_SHEET_NAME = "Orders"



# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ ENV –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
SHELF_LIFE_DAYS = int(os.getenv("SHELF_LIFE_DAYS", "360"))      # —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–¥–Ω–µ–π)
TARGET_OSG_PERCENT = int(os.getenv("TARGET_OSG_PERCENT", "82")) # —Ü–µ–ª–µ–≤–æ–π –û–°–° (–≤ %)
SAFETY_BUFFER_DAYS = int(os.getenv("SAFETY_BUFFER_DAYS", "2"))  # —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±—É—Ñ–µ—Ä

# –ö–∞–∫–∞—è –≤–∫–ª–∞–¥–∫–∞ –≤ –∫–Ω–∏–≥–µ
ORDERS_SHEET_NAME = os.getenv("ORDERS_SHEET_NAME", "Orders").strip()

# –ö—ç—à –∑–∞–∫–∞–∑–æ–≤: {order_no: "dd.mm.yyyy"}
ORDERS_CACHE: Dict[str, str] = {}

# -------------------- –£–¢–ò–õ–ò–¢–´ ------------------------
def parse_date(date_str: str) -> Optional[datetime]:
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –¥–∞—Ç—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö."""
    if not date_str:
        return None

    # –¢–µ—Ä–ø–∏–º–æ –æ—Ç–Ω–æ—Å–∏–º—Å—è –∫ ¬´–ø—É—Å—Ç—ã–º¬ª —Å—Ç—Ä–æ–∫–∞–º –∏ –ª–∏—à–Ω–∏–º –ø—Ä–æ–±–µ–ª–∞–º
    s = str(date_str).strip()
    if not s:
        return None

    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    formats: List[str] = [
        "%d.%m.%Y",
        "%Y-%m-%d",
        "%d-%m-%Y",
        "%d/%m/%Y",
        "%d.%m.%y",
    ]
    for fmt in formats:
        try:
            return datetime.strptime(s, fmt)
        except Exception:
            continue

    # –ò–Ω–æ–≥–¥–∞ –≤ Google Sheets –¥–∞—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ —É–∂–µ –∫–∞–∫ datetime.date/datetime
    if isinstance(date_str, datetime):
        return date_str

    return None


def min_production_date_for_osg(delivery_dt: datetime) -> datetime:
    """
    –†–∞—Å—á—ë—Ç ¬´–Ω–µ —Ä–∞–Ω—å—à–µ –∫–∞–∫–æ–≥–æ –¥–Ω—è –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∫ –¥–∞—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    –û–°–° –±—ã–ª >= TARGET_OSG_PERCENT.

    –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º –ª–∏–Ω–µ–π–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –û–°–°: 100% -> 0% –∑–∞ SHELF_LIFE_DAYS.
      age_max_days = floor((100 - target)/100 * shelf_life) - buffer
    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ: delivery_dt - age_max_days.
    """
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∫ –¥–∞—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    max_age_float = (100 - TARGET_OSG_PERCENT) / 100 * SHELF_LIFE_DAYS
    max_age_days = max(0, int(max_age_float) - SAFETY_BUFFER_DAYS)
    return delivery_dt - timedelta(days=max_age_days)


def _orders_keyboard() -> InlineKeyboardMarkup:
    if not ORDERS_CACHE:
        return InlineKeyboardMarkup([[InlineKeyboardButton("–ü—É—Å—Ç–æ", callback_data="noop")]])
    buttons = [[InlineKeyboardButton(order_no, callback_data=order_no)] for order_no in sorted(ORDERS_CACHE)]
    return InlineKeyboardMarkup(buttons)


def _gs_open_worksheet():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (sh, ws) ‚Äî –∫–Ω–∏–≥—É –∏ –ª–∏—Å—Ç –ø–æ –∏–º–µ–Ω–∏."""
    # service_account —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π gspread.Client
    gc = gspread.service_account(filename=GOOGLE_CREDS_PATH)

    sh = gc.open_by_key(GOOGLE_SHEET_ID)
    ws = sh.worksheet(ORDERS_SHEET_NAME)  # –ª–∏—Å—Ç –ø–æ –∏–º–µ–Ω–∏
    return sh, ws




def load_orders_from_sheet() -> Dict[str, str]:
    """–ß–∏—Ç–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {order_no: delivery_str}."""
    _, ws = _gs_open_worksheet()

    values = ws.get_all_values()  # –≤—Å—è —Ç–∞–±–ª–∏—Ü–∞ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
    if not values:
        return {}

    # ---- –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = [h.strip().lower() for h in values[0]]  # —É–±—Ä–∞–ª–∏ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–µ–ª–∏ –∫ lower
    try:
        idx_order = headers.index("orderno")
        idx_date  = headers.index("deliverydate")
    except ValueError:
        raise KeyError(
            f"–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'OrderNo' –∏ 'DeliveryDate'. –°–µ–π—á–∞—Å: {headers}"
        )

    # ---- –¥–∞–Ω–Ω—ã–µ
    orders: Dict[str, str] = {}
    for row in values[1:]:
        # –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫
        if len(row) <= max(idx_order, idx_date):
            continue
        order_no = (row[idx_order] or "").strip()
        delivery = (row[idx_date]  or "").strip()
        if not order_no:
            continue
        orders[order_no] = delivery or "‚Äî"

    return orders

# -------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ë–æ—Ç —Ä–∞—Å—á—ë—Ç–∞ –¥–∞—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–¥ –û–°–°.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/reload ‚Äî –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∑–∞–∫–∞–∑–æ–≤\n"
        "/orders ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤\n"
        "/debug ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–≤—è–∑–∏ —Å Google Sheets\n\n"
        "–ü—Ä–∞–≤–∏–ª–æ: —Å—á–∏—Ç–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–æ–∑–ª–∏–≤–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –∫ –¥–∞—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        f"–û–°–° –±—ã–ª ‚â• {TARGET_OSG_PERCENT}%, –ø—Ä–∏ —Å—Ä–æ–∫–µ –≥–æ–¥–Ω–æ—Å—Ç–∏ {SHELF_LIFE_DAYS} –¥–Ω–µ–π\n"
        f"–∏ –±—É—Ñ–µ—Ä–µ {SAFETY_BUFFER_DAYS} –¥–Ω."
    )
    await update.message.reply_text(text)


async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets."""
    try:
        sh, ws = _gs_open_worksheet()
        first_row = ws.row_values(1)
        worksheets = [w.title for w in sh.worksheets()]
        msg = (
            "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ‚Äî OK\n"
            f"–ö–Ω–∏–≥–∞: {sh.title}\n"
            f"–õ–∏—Å—Ç—ã: {', '.join(worksheets)}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É—é –ª–∏—Å—Ç: {ws.title}\n"
            f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏: {first_row}"
        )
        await update.message.reply_text(msg)
    except Exception as e:
        logger.exception("DEBUG error")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ Google Sheets: {e}")


async def reload_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, —Å–æ–±—Ä–∞—Ç—å –∫—ç—à."""
    try:
        global ORDERS_CACHE
        ORDERS_CACHE = load_orders_from_sheet()
        await update.message.reply_text(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ORDERS_CACHE)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Google Sheets.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏."""
    if not ORDERS_CACHE:
        await update.message.reply_text("–ö—ç—à –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /reload")
        return
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–∫–∞–∑:", reply_markup=_orders_keyboard())


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞."""
    query = update.callback_query
    await query.answer()

    order_no = query.data
    if order_no == "noop":
        return

    delivery_str = ORDERS_CACHE.get(order_no, "")
    delivery_dt = parse_date(delivery_str)
    if delivery_dt is None:
        await query.edit_message_text(
            f"üì¶ –ó–∞–∫–∞–∑: {order_no}\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_str}"
        )
        return

    # —Ä–∞—Å—á—ë—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    min_prod = min_production_date_for_osg(delivery_dt)

    reply = (
        f"üì¶ –ó–∞–∫–∞–∑: {order_no}\n"
        f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_dt.strftime('%d.%m.%Y')}\n"
        f"üíß –¢—Ä–µ–±—É–µ–º—ã–π –û–°–°: ‚â• {TARGET_OSG_PERCENT}%\n"
        f"üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ‚Äî –Ω–µ —Ä–∞–Ω—å—à–µ: {min_prod.strftime('%d.%m.%Y')}\n"
        f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –°–ì={SHELF_LIFE_DAYS} –¥–Ω–µ–π, –±—É—Ñ–µ—Ä={SAFETY_BUFFER_DAYS} –¥–Ω."
    )
    await query.edit_message_text(reply)

# --- –æ—á–∏—Å—Ç–∫–∞ webhook –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ getUpdates ---
async def _clear_webhook(app: Application):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook –æ—á–∏—â–µ–Ω (drop_pending_updates=True).")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook")

# -------------------- main --------------------------
def main():
    if not TELEGRAM_BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å ENV/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

    app = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .post_init(_clear_webhook)
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(CommandHandler("debug", debug))
    app.add_handler(CommandHandler("reload", reload_orders))
    app.add_handler(CommandHandler("orders", show_orders))
    app.add_handler(CallbackQueryHandler(button_callback))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶")
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    try:
        # –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ PTB –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:
        # os.environ["PTB_LOG_LEVEL"] = "DEBUG"
        main()
    except Exception:
        import traceback
        traceback.print_exc()
        raise
