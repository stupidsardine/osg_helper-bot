# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
"""
OSG Orders Bot ‚Äî PTB v21+
Google Sheets (gspread + —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç)

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞ (ORDERS_SHEET_NAME):
- OrderNo        ‚Äî –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
- DeliveryDate   ‚Äî –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (dd.mm.yyyy, yyyy-mm-dd, dd/mm/yyyy, dd.mm.yy)

–õ–æ–≥–∏–∫–∞:
‚Äî —Å—á–∏—Ç–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–æ–∑–ª–∏–≤–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –∫ –¥–∞—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏ OSG —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è ‚â• TARGET_OSG_PERCENT,
  –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ SHELF_LIFE_DAYS –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±—É—Ñ–µ—Ä SAFETY_BUFFER_DAYS.
‚Äî –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ OSG –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
‚Äî –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞: –û–±–Ω–æ–≤–∏—Ç—å / –ó–∞–∫–∞–∑—ã / –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /menu).
"""

import os
import logging
from typing import Dict, List, Optional
from datetime import datetime, timedelta

import gspread
from gspread.exceptions import WorksheetNotFound

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# -------------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï --------------------
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("osg-bot")
logger.setLevel(logging.DEBUG)

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------
# –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ ENV; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8462456972:AAHBUSVkSYEsJWmexYBoK-gLcTbsdj1LLXo")
GOOGLE_SHEET_ID    = os.getenv("GOOGLE_SHEET_ID",    "1O1LQ0y9IC4k4sp6_q5Uq5E8hABVLkh_29txBaygULdA")
GOOGLE_CREDS_PATH  = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", r"C:\Users\–ê–ª–µ–∫—Å–µ–π\Desktop\osg-helper-bot\gsa.json")
ORDERS_SHEET_NAME  = os.getenv("ORDERS_SHEET_NAME",  "Orders").strip()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ENV)
SHELF_LIFE_DAYS     = int(os.getenv("SHELF_LIFE_DAYS",     "360"))  # —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–¥–Ω–µ–π)
TARGET_OSG_PERCENT  = int(os.getenv("TARGET_OSG_PERCENT",  "80"))   # —Ü–µ–ª–µ–≤–æ–π OSG (%)
SAFETY_BUFFER_DAYS  = int(os.getenv("SAFETY_BUFFER_DAYS",  "3"))    # —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±—É—Ñ–µ—Ä (–¥–Ω–µ–π)

# –ö—ç—à –∑–∞–∫–∞–∑–æ–≤: {order_no: "delivery_str"}
ORDERS_CACHE: Dict[str, str] = {}

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞
REPLY_KB = ReplyKeyboardMarkup(
    [["–û–±–Ω–æ–≤–∏—Ç—å", "–ó–∞–∫–∞–∑—ã", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"]],
    resize_keyboard=True,
    one_time_keyboard=False,
)

# -------------------- –£–¢–ò–õ–ò–¢–´ ------------------------
def parse_date(date_str: str) -> Optional[datetime]:
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –¥–∞—Ç—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö."""
    if not date_str:
        return None
    s = str(date_str).strip()
    if not s:
        return None

    formats: List[str] = [
        "%d.%m.%Y",
        "%Y-%m-%d",
        "%d-%m-%Y",
        "%d/%m/%Y",
        "%d.%m.%y",
    ]
    for fmt in formats:
        try:
            return datetime.strptime(s, fmt)
        except Exception:
            continue

    if isinstance(date_str, datetime):
        return date_str
    return None


def min_production_date_for_osg(delivery_dt: datetime) -> datetime:
    """
    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ —Ç–∞–∫–æ–π –¥–∞—Ç—ã, —á—Ç–æ–±—ã –∫ DeliveryDate –ø—Ä–æ–¥—É–∫—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª OSG ‚â• TARGET_OSG_PERCENT.
    –ú–æ–¥–µ–ª—å: –ª–∏–Ω–µ–π–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ OSG 100% -> 0% –∑–∞ SHELF_LIFE_DAYS.
    max_age_days = floor((100 - target)/100 * shelf_life) - buffer
    """
    max_age_float = (100 - TARGET_OSG_PERCENT) / 100 * SHELF_LIFE_DAYS
    max_age_days = max(0, int(max_age_float) - SAFETY_BUFFER_DAYS)
    return delivery_dt - timedelta(days=max_age_days)


def _gs_open_worksheet():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (sh, ws) ‚Äî –∫–Ω–∏–≥—É –∏ –ª–∏—Å—Ç –ø–æ –∏–º–µ–Ω–∏."""
    gc = gspread.service_account(filename=GOOGLE_CREDS_PATH)
    sh = gc.open_by_key(GOOGLE_SHEET_ID)
    ws = sh.worksheet(ORDERS_SHEET_NAME)
    return sh, ws


def load_orders_from_sheet() -> Dict[str, str]:
    """–ß–∏—Ç–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {order_no: delivery_str}."""
    _, ws = _gs_open_worksheet()
    values = ws.get_all_values()
    if not values:
        return {}

    headers = [h.strip().lower() for h in values[0]]
    try:
        idx_order = headers.index("orderno")
        idx_date  = headers.index("deliverydate")
    except ValueError:
        raise KeyError("–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'OrderNo' –∏ 'DeliveryDate'.")

    orders: Dict[str, str] = {}
    for row in values[1:]:
        if len(row) <= max(idx_order, idx_date):
            continue
        order_no = (row[idx_order] or "").strip()
        delivery = (row[idx_date]  or "").strip()
        if not order_no:
            continue
        orders[order_no] = delivery or "‚Äî"
    return orders

# -------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ë–æ—Ç —Ä–∞—Å—á—ë—Ç–∞ –¥–∞—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–¥ —Ü–µ–ª–µ–≤–æ–π OSG.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/reload ‚Äî –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à\n"
        "/orders ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n"
        "/debug  ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Google Sheets\n"
        "/menu   ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫\n\n"
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π OSG: ‚â• {TARGET_OSG_PERCENT}%\n"
        f"‚Ä¢ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {SHELF_LIFE_DAYS} –¥–Ω–µ–π\n"
        f"‚Ä¢ –ë—É—Ñ–µ—Ä: {SAFETY_BUFFER_DAYS} –¥–Ω."
    )
    await update.message.reply_text(text, reply_markup=REPLY_KB)

# –†—É—á–Ω–æ–π –≤—ã–∑–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–æ–ø–∞–ª–∞)
async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=REPLY_KB)

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets."""
    try:
        sh, ws = _gs_open_worksheet()
        first_row = ws.row_values(1)
        worksheets = [w.title for w in sh.worksheets()]
        msg = (
            "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ‚Äî OK\n"
            f"–ö–Ω–∏–≥–∞: {sh.title}\n"
            f"–õ–∏—Å—Ç—ã: {', '.join(worksheets)}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É—é –ª–∏—Å—Ç: {ws.title}\n"
            f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏: {first_row}"
        )
        await update.message.reply_text(msg, reply_markup=REPLY_KB)
    except Exception as e:
        logger.exception("DEBUG error")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ Google Sheets: {e}", reply_markup=REPLY_KB)

async def reload_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, —Å–æ–±—Ä–∞—Ç—å –∫—ç—à."""
    try:
        global ORDERS_CACHE
        ORDERS_CACHE = load_orders_from_sheet()
        await update.message.reply_text(
            f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ORDERS_CACHE)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Google Sheets.",
            reply_markup=REPLY_KB
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=REPLY_KB)

def _orders_keyboard() -> InlineKeyboardMarkup:
    if not ORDERS_CACHE:
        return InlineKeyboardMarkup([[InlineKeyboardButton("–ü—É—Å—Ç–æ", callback_data="noop")]])
    buttons = [[InlineKeyboardButton(order_no, callback_data=order_no)]
               for order_no in sorted(ORDERS_CACHE)]
    return InlineKeyboardMarkup(buttons)

async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏."""
    if not ORDERS_CACHE:
        await update.message.reply_text("–ö—ç—à –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /reload", reply_markup=REPLY_KB)
        return
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–∫–∞–∑:", reply_markup=_orders_keyboard())

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞."""
    query = update.callback_query
    await query.answer()

    order_no = query.data
    if order_no == "noop":
        return

    delivery_str = ORDERS_CACHE.get(order_no, "")
    delivery_dt = parse_date(delivery_str)
    if delivery_dt is None:
        await query.edit_message_text(
            f"üì¶ –ó–∞–∫–∞–∑: {order_no}\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_str}"
        )
        return

    # —Ä–∞—Å—á—ë—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (—á—Ç–æ–±—ã –∫ –¥–∞—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏ OSG ‚â• —Ü–µ–ª–µ–≤–æ–≥–æ)
    min_prod = min_production_date_for_osg(delivery_dt)

    reply = (
        f"üì¶ –ó–∞–∫–∞–∑: {order_no}\n"
        f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_dt.strftime('%d.%m.%Y')}\n"
        f"üíß –¢—Ä–µ–±—É–µ–º—ã–π OSG: ‚â• {TARGET_OSG_PERCENT}%\n"
        f"üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ‚Äî *–Ω–µ —Ä–∞–Ω—å—à–µ*: {min_prod.strftime('%d.%m.%Y')}\n"
        f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –°–ì={SHELF_LIFE_DAYS} –¥–Ω–µ–π, –±—É—Ñ–µ—Ä={SAFETY_BUFFER_DAYS} –¥–Ω."
    )
    await query.edit_message_text(reply, parse_mode="Markdown")

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (ReplyKeyboard)
async def on_text_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    if txt == "–û–±–Ω–æ–≤–∏—Ç—å":
        await reload_orders(update, context)
    elif txt == "–ó–∞–∫–∞–∑—ã":
        await show_orders(update, context)
    elif txt == "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        await debug(update, context)

# --- –æ—á–∏—Å—Ç–∫–∞ webhook –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ getUpdates ---
async def _clear_webhook(app: Application):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook –æ—á–∏—â–µ–Ω (drop_pending_updates=True).")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook")

# -------------------- main --------------------------
def main():
    if not TELEGRAM_BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å ENV/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

    app = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .post_init(_clear_webhook)
        .build()
    )

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(CommandHandler("debug", debug))
    app.add_handler(CommandHandler("reload", reload_orders))
    app.add_handler(CommandHandler("orders", show_orders))

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (ReplyKeyboard)
    app.add_handler(MessageHandler(filters.Regex(r"^(–û–±–Ω–æ–≤–∏—Ç—å|–ó–∞–∫–∞–∑—ã|–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)$"), on_text_buttons))

    # –ö–Ω–æ–ø–∫–∏-–∑–∞–∫–∞–∑—ã (Inline)
    app.add_handler(CallbackQueryHandler(button_callback))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        main()
    except Exception:
        import traceback
        traceback.print_exc()
        raise
