# -*- coding: utf-8 -*-
"""
OSG Orders Bot
python-telegram-bot == 21.x
gspread + Google Service Account

–ö–æ–º–∞–Ω–¥—ã:
  /start  /help   ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
  /reload        ‚Äì –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∑–∞–∫–∞–∑–æ–≤
  /orders        ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
  /debug         ‚Äì –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
"""

import os
import logging
from typing import Dict, List

import gspread
from gspread.exceptions import WorksheetNotFound
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from datetime import datetime, timedelta

from datetime import datetime, timedelta

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞ –û–°–° ---
SHELF_LIFE_DAYS = 360          # –æ–±—â–∏–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏, –¥–Ω–µ–π
TARGET_OSG_PERCENT = 80        # —Ç—Ä–µ–±—É–µ–º—ã–π –û–°–° –Ω–∞ –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏, %
SAFETY_BUFFER_DAYS = 2         # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å

def min_production_date_for_osg(delivery_dt: datetime) -> datetime.date:
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, —á—Ç–æ–±—ã –Ω–∞ –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏
    –û–°–° –±—ã–ª >= TARGET_OSG_PERCENT (—Å —É—á—ë—Ç–æ–º –±—É—Ñ–µ—Ä–∞).
    """
    max_elapsed = int(SHELF_LIFE_DAYS * (1 - TARGET_OSG_PERCENT / 100))
    allowed_age = max(0, max_elapsed - SAFETY_BUFFER_DAYS)
    return (delivery_dt - timedelta(days=allowed_age)).date()



# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò --------------------
# –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∑–¥–µ—Å—å –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
#   TELEGRAM_BOT_TOKEN, GOOGLE_SHEET_ID, GOOGLE_APPLICATION_CREDENTIALS
#   (GOOGLE_APPLICATION_CREDENTIALS ‚Äî –ø—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "<–í8462456972:AAHBUSVkSYEsJWmexYBoK-gLcTbsdj1LLXo–°–¢–ê–í–¨_–°–Æ–î–ê_–¢–û–ö–ï–ù>")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID", "<1pduByH_gIF9PiLdbFU1IK3yFWJrwGc-maXCumi8r4q8>")
GOOGLE_CREDS_PATH = os.getenv("GOOGLE_APPLICATION_CREDENTIALS", "gsa.json")
# –í–∫–ª–∞–¥–∫–∞ (–ª–∏—Å—Ç) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ª–∏—Å—Ç–∞ –Ω–µ—Ç, –±–æ—Ç –≤–æ–∑—å–º–µ—Ç –ø–µ—Ä–≤—ã–π.
SHEET_TITLE = os.getenv("GOOGLE_SHEET_TITLE", "Orders")

# -------------------- –õ–û–ì–ò -------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("osg-bot")

# –ö—ç—à –∑–∞–∫–∞–∑–æ–≤: {OrderNo: DeliveryDate}
ORDERS_CACHE: Dict[str, str] = {}


# -------------------- Google Sheets ----------------
def load_orders_from_sheet() -> Dict[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {OrderNo: DeliveryDate}.
    –î–µ–ª–∞–µ—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: –≤—ã–±–∏—Ä–∞–µ—Ç –ª–∏—Å—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–∏–ª–∏ –ø–µ—Ä–≤—ã–π, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏),
    –æ–±—Ä–µ–∑–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∞—ë—Ç –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏.
    """
    if not GOOGLE_SHEET_ID:
        raise RuntimeError("GOOGLE_SHEET_ID –Ω–µ –∑–∞–¥–∞–Ω")

    if not os.path.exists(GOOGLE_CREDS_PATH):
        raise RuntimeError(
            f"–§–∞–π–ª –∫—Ä–µ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {GOOGLE_CREDS_PATH}. "
            f"–ü—Ä–æ–≤–µ—Ä—å GOOGLE_APPLICATION_CREDENTIALS –∏–ª–∏ –ø—É—Ç—å –≤ –∫–æ–¥–µ."
        )

    client = gspread.service_account(filename=GOOGLE_CREDS_PATH)
    sh = client.open_by_key(GOOGLE_SHEET_ID)

    # —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    titles = [ws.title for ws in sh.worksheets()]

    # –ø—Ä–æ–±—É–µ–º —Ä–æ–≤–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏–Ω–∞—á–µ ‚Äî –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    try:
        ws = sh.worksheet(SHEET_TITLE.strip())
    except WorksheetNotFound:
        ws = sh.sheet1

    header = [c.strip() for c in ws.row_values(1)]
    try:
        col_order = header.index("OrderNo") + 1
        col_date = header.index("DeliveryDate") + 1
    except ValueError:
        raise RuntimeError(
            f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ 'OrderNo'/'DeliveryDate'. –ù–∞–π–¥–µ–Ω–æ: {header}. "
            f"–õ–∏—Å—Ç—ã –∫–Ω–∏–≥–∏: {titles}. –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç: {ws.title}"
        )

    data: List[List[str]] = ws.get_all_values()
    result: Dict[str, str] = {}
    for row in data[1:]:
        if len(row) < max(col_order, col_date):
            continue
        order_no = row[col_order - 1].strip()
        delivery_date = row[col_date - 1].strip()
        if order_no:
            result[order_no] = delivery_date

    if not result:
        raise RuntimeError(
            f"–î–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏. "
            f"–õ–∏—Å—Ç: {ws.title}, –∑–∞–≥–æ–ª–æ–≤–∫–∏: {header}"
        )

    return result


# -------------------- –•—ç–Ω–¥–ª–µ—Ä—ã ---------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ë–æ—Ç —Ä–∞—Å—á—ë—Ç–∞ –¥–∞—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Google Sheets.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /reload ‚Äî –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à\n"
        "‚Ä¢ /orders ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏\n"
        "‚Ä¢ /debug ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ\n\n"
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´Orders¬ª (–∏–ª–∏ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç),\n"
        "–≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: OrderNo, DeliveryDate."
    )
    await update.message.reply_text(text)


async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫ –∫–∞–∫–æ–π –∫–Ω–∏–≥–µ/–ª–∏—Å—Ç—É –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∏ –∫–∞–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∏–¥–∏–º."""
    try:
        if not os.path.exists(GOOGLE_CREDS_PATH):
            await update.message.reply_text(
                f"‚ùå –ö—Ä–µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {GOOGLE_CREDS_PATH}"
            )
            return

        client = gspread.service_account(filename=GOOGLE_CREDS_PATH)
        sh = client.open_by_key(GOOGLE_SHEET_ID)
        titles = [ws.title for ws in sh.worksheets()]
        try:
            ws = sh.worksheet(SHEET_TITLE.strip())
        except WorksheetNotFound:
            ws = sh.sheet1

        header = [c.strip() for c in ws.row_values(1)]

        msg = (
            "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ‚Äî OK\n"
            f"–ö–Ω–∏–≥–∞: {sh.title}\n"
            f"–õ–∏—Å—Ç—ã: {', '.join(titles)}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É—é –ª–∏—Å—Ç: {ws.title}\n"
            f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏: {header}"
        )
        await update.message.reply_text(msg)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ /debug")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e}")


async def reload_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à."""
    global ORDERS_CACHE
    try:
        ORDERS_CACHE = load_orders_from_sheet()
        await update.message.reply_text(
            f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ORDERS_CACHE)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Google Sheets."
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


def _orders_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –∫—ç—à–∞."""
    if not ORDERS_CACHE:
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ü—É—Å—Ç–æ", callback_data="noop")]]
        )

    buttons: List[List[InlineKeyboardButton]] = []
    for order_no in sorted(ORDERS_CACHE.keys()):
        buttons.append([InlineKeyboardButton(order_no, callback_data=order_no)])

    return InlineKeyboardMarkup(buttons)


async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤."""
    if not ORDERS_CACHE:
        await update.message.reply_text("–ö—ç—à –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /reload.")
        return
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–∫–∞–∑:", reply_markup=_orders_keyboard())


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    order_no = query.data
    if order_no == "noop":
        await query.edit_message_text("–ö—ç—à –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /reload")
        return

    # 1) –ë–µ—Ä—ë–º —Å—Ç—Ä–æ–∫–æ–≤—É—é –¥–∞—Ç—É –∏–∑ –∫—ç—à–∞
    delivery_str = ORDERS_CACHE.get(order_no)
    if not delivery_str:
        await query.edit_message_text(f"üì¶ –ó–∞–∫–∞–∑: {order_no}\n‚ö†Ô∏è –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # 2) –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤ datetime (–ø–æ–¥–¥–µ—Ä–∂–∏–º 2 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞)
    delivery_dt = None
    for fmt in ("%d.%m.%Y", "%Y-%m-%d"):
        try:
            delivery_dt = datetime.strptime(delivery_str, fmt)
            break
        except ValueError:
            pass

    if delivery_dt is None:
        await query.edit_message_text(
            f"üì¶ –ó–∞–∫–∞–∑: {order_no}\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_str}"
        )
        return

    # 3) –°—á–∏—Ç–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–æ–∑–ª–∏–≤–∞ –ø–æ–¥ —Ç—Ä–µ–±—É–µ–º—ã–π –û–°–°
    min_prod = min_production_date_for_osg(delivery_dt)

    # 4) –û—Ç–≤–µ—á–∞–µ–º
    reply = (
        f"üì¶ –ó–∞–∫–∞–∑: {order_no}\n"
        f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_dt.strftime('%d.%m.%Y')}\n"
        f"üéØ –¢—Ä–µ–±—É–µ–º—ã–π –û–°–ì: ‚â• {TARGET_OSG_PERCENT}%\n"
        f"üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ‚Äî –Ω–µ —Ä–∞–Ω—å—à–µ: {min_prod.strftime('%d.%m.%Y')}\n"
        f"‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –°–ì={SHELF_LIFE_DAYS} –¥–Ω–µ–π, –±—É—Ñ–µ—Ä={SAFETY_BUFFER_DAYS} –¥–Ω."
    )
    await query.edit_message_text(reply)




# --- –æ—á–∏—Å—Ç–∫–∞ webhook –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ getUpdates ---
async def _clear_webhook(app: Application):
    await app.bot.delete_webhook(drop_pending_updates=True)


# -------------------- main -------------------------
def main():
    if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN.startswith("<"):
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–¥–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    app = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .post_init(_clear_webhook)
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(CommandHandler("debug", debug))
    app.add_handler(CommandHandler("reload", reload_orders))
    app.add_handler(CommandHandler("orders", show_orders))
    app.add_handler(CallbackQueryHandler(button_callback))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶")
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
